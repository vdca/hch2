separate(outseq, c("seqidA", "outseqA")) %>%
separate(outseq1, c("seqidB", "outseqB")) %>%
slice(1:5)
buff %>%
separate(outseq, c("seqidA", "outseqA")) %>%
separate(outseq1, c("seqidB", "outseqB")) %>%
slice(1:5) %>%
mutate(similar = similarity(outseqA, outseqB))
similarity
similarity <- function(seqA, seqB) {
# levenshtein distance between seqA and seqB
seqdistance <- stringdist(seqA, seqB, "lv")
# similarity score between seqA and seqB
# normalise levdist using the length of the longest sequence
longest <- max(nchar(seqA), nchar(seqB))
seqsimilarity <- 1 - (seqdistance / longest)
return(seqsimilarity)
}
buff %>%
separate(outseq, c("seqidA", "outseqA")) %>%
separate(outseq1, c("seqidB", "outseqB")) %>%
slice(1:5) %>%
mutate(similar = similarity(outseqA, outseqB))
buff %>%
separate(outseq, c("seqidA", "outseqA")) %>%
separate(outseq1, c("seqidB", "outseqB")) %>%
# slice(1:5) %>%
mutate(similar = similarity(outseqA, outseqB))
head(dist)
head(disp)
disp <- readRDS("../datuak/hch11/hch11_chains_disp.rds")
head(disp)
buff %>%
separate(outseq, c("seqidA", "outseqA")) %>%
separate(outseq1, c("seqidB", "outseqB")) %>%
# slice(1:5) %>%
mutate(similar = similarity(outseqA, outseqB),
dispersion <- 1 - similar)
buff %>%
separate(outseq, c("seqidA", "outseqA")) %>%
separate(outseq1, c("seqidB", "outseqB")) %>%
# slice(1:5) %>%
mutate(similar = similarity(outseqA, outseqB),
dispersion = 1 - similar)
head(disp)
disp.combinations <- d %>%
tbl_df() %>%
select(generation, chain, outseq, seqid1) %>%
mutate(outseq = paste(seqid1, outseq, sep = ".")) %>%
group_by(generation, chain) %>%
tidyr::expand(outseq, outseq) %>%
ungroup()
disp2 <- disp.combinations %>%
separate(outseq, c("seqidA", "outseqA")) %>%
separate(outseq1, c("seqidB", "outseqB")) %>%
mutate(similar = similarity(outseqA, outseqB),
dispersion = 1 - similar)
disp2
disp2 %>%
summarise(a = mean(dispersion))
disp2 %>%
summarise(a = mean(dispersion))
disp2 %>%
group_by(chain) %>%
summarise(a = mean(dispersion))
disp2 %>%
group_by(chain) %>%
summarise(a = mean(dispersion))
disp <- disp.combinations %>%
separate(outseq, c("seqidA", "outseqA")) %>%
separate(outseq1, c("seqidB", "outseqB")) %>%
mutate(similar = similarity(outseqA, outseqB),
dispersion = 1 - similar)
dispersion.chains <- summarySE(disp, "dispersion", c("chain", "generation"))
dispersion <- summarySE(dispersion.chains, "dispersion", "generation")
disp1 <- ggplot(dispersion) + aes(x = as.factor(generation), y = dispersion, group = 1) +
geom_errorbar(aes(ymin=dispersion-ci, ymax=dispersion+ci), width=.1) +
geom_line() +
labs(x = "Generation", y = "Set dispersion")
disp1
disp <- readRDS("../datuak/hch11/hch11_chains_disp.rds")
dispersion.chains <- summarySE(disp, "dispersion", c("chain", "generation"))
dispersion <- summarySE(dispersion.chains, "dispersion", "generation")
disp1 <- ggplot(dispersion) + aes(x = as.factor(generation), y = dispersion, group = 1) +
geom_errorbar(aes(ymin=dispersion-ci, ymax=dispersion+ci), width=.1) +
geom_line() +
labs(x = "Generation", y = "Set dispersion")
disp1
disp2 <- dispersion.chains %>%
mutate(chain = paste("Chain", chain)) %>%
crossing(highlight = unique(.$chain)) %>%
ggplot() +
aes(x = as.factor(generation), y = mean, group = chain, alpha = highlight == chain) +
geom_errorbar(aes(ymin=mean-ci, ymax=mean+ci), width=.1) +
geom_line() + # geom_point() +
facet_wrap(~highlight) +
scale_alpha_discrete(range = c(.2, 1)) +
theme(legend.position="none") +
labs(x = "Generation", y = "Set dispersion")
disp2
mm.disp <- lmer(dispersion ~ generation + (1|chain), dispersion.chains, REML = F); summary(mm.disp)
mm.disp.null <- lmer(dispersion ~ 1 + (1|chain), dispersion.chains, REML = F)
anova(mm.disp.null, mm.disp)
disp.combinations <- d %>%
tbl_df() %>%
select(generation, chain, outseq, seqid1) %>%
mutate(outseq = paste(seqid1, outseq, sep = ".")) %>%
group_by(generation, chain) %>%
tidyr::expand(outseq, outseq) %>%
ungroup()
#' then compute dispersion for each sequence pair
disp <- disp.combinations %>%
separate(outseq, c("seqidA", "outseqA")) %>%
separate(outseq1, c("seqidB", "outseqB")) %>%
mutate(similar = similarity(outseqA, outseqB),
dispersion = 1 - similar)
mm.disp <- lmer(dispersion ~ generation + (1|chain), dispersion.chains, REML = F); summary(mm.disp)
mm.disp.null <- lmer(dispersion ~ 1 + (1|chain), dispersion.chains, REML = F)
anova(mm.disp.null, mm.disp)
disp %>%
group_by(chain) %>%
summarise(mean(dispersion))
disp <- readRDS("../datuak/hch11/hch11_chains_disp.rds")
disp %>%
group_by(chain) %>%
summarise(mean(dispersion))
stringdist(c("aa", "ab"), c("ab", "bb"))
stringdist(c("aa", "ab"), c("ab", "bbc"))
stringdist(c("aa", "ab"), c("ab", "bbcd"))
max(nchar("aa", "ab"), nchar("ab", "bbcd"))
nchar(c("aa", "ab"))
nchar(c("aa", "ab"), c("aas", "absdfa"))
nchar(c("aa", "ab"))
max(nchar(c("aa", "ab")), nchar(c("aa", "ab")))
max(nchar(c("aa", "ab")), nchar(c("aa", "abaaa")))
max(nchar(c("aa", "ab")), nchar(c("aa", "abaaaasdf")))
sample(5, 5)
sample(5, 10)
sample(10, 10)
sample(10, 10, replace = T)
sample(10, 20, replace = T)
lena <- sample(10, 20, replace = T)
lenb <- sample(10, 20, replace = T)
lena
lenb
mean(lena)
mean(lenb)
lenb <- sample(12, 20, replace = T)
lenb
lena <- sample(6:12, 20, replace = T)
lena
lenb <- sample(6:20, 20, replace = T)
lenb
mean(lenb)
mean(lena)
tibble(lena, lenb)
tibble(lena, lenb) %>%
mutate(max(lena, lenb))
tibble(lena, lenb) %>%
rowwise() %>%
mutate(max(lena, lenb))
tibble(lena, lenb) %>%
rowwise() %>%
mutate(longest = max(lena, lenb)) %>%
pull(longest)
tibble(a = 1:4)
similarity <- function(seqA, seqB) {
# levenshtein distance between seqA and seqB
seqdistance <- stringdist(seqA, seqB, "lv")
# similarity score between seqA and seqB
# normalise levdist using the length of the longest sequence
longest <- tibble(lenA = nchar(seqA), lenB = nchar(seqB)) %>%
rowwise() %>%
mutate(longest = max(lenA, lenB)) %>%
pull(longest)
# longest <- max(nchar(seqA), nchar(seqB))
seqsimilarity <- 1 - (seqdistance / longest)
return(seqsimilarity)
}
disp.combinations <- d %>%
tbl_df() %>%
select(generation, chain, outseq, seqid1) %>%
mutate(outseq = paste(seqid1, outseq, sep = ".")) %>%
group_by(generation, chain) %>%
tidyr::expand(outseq, outseq) %>%
ungroup()
disp <- disp.combinations %>%
separate(outseq, c("seqidA", "outseqA")) %>%
separate(outseq1, c("seqidB", "outseqB")) %>%
mutate(similar = similarity(outseqA, outseqB),
dispersion = 1 - similar)
disp %>%
group_by(chain) %>%
summarise(mean(dispersion))
View(d)
d$sylscore == d$score
View(d)
d %>% select(sylscore, score) %>% View
View(d)
install.packages(c("conting", "ggeffects", "haven", "hexbin", "htmlTable", "htmlwidgets", "kableExtra", "opencage", "Rcpp", "snakecase", "sp", "urltools"))
#' ---
#' title: HCH 1.1, summary 1
#' author: vdca
#' date: "Created: 2016.02.18. Modified: `r Sys.time()`"
#' css: css/vignette.css
#' output:
#'   html_document:
#'     toc: true
#'     toc_depth: 1
#'     theme: "flatly"
#'     highlight: "textmate"
#' ---
#+ setup, include=FALSE
opts_chunk$set(fig.width=9, fig.height=7, echo=FALSE, warning=FALSE, message=FALSE)
#--------------------------------------------------------
# Globals
#--------------------------------------------------------
rm(list=ls())     # remove previous objects from workspace
source("hch11_funs.R")
library(tidyverse)
library(ggplot2)
theme_set(theme_bw() + theme(strip.background = element_blank()))
library(ggrepel)
library(scales)
library(knitr)
library(reshape2)
library(stringdist)
library(lme4)
library(lmerTest)
library(tidyr)
library(dplyr)
library(broom)
library(stringr)
library(xtable)
library(tidytext)
# select experiment phase and chain for analysis
phase <- "chains"
chains <- as.character(1:4)
# figure properties
figscale <- 1
fw <- 5 # figure width
fh <- 5 # figure height
# directories
basedir <- "../esperimentuak/hch11/response"
figdir <- "../plotak/hch2/analysis/"
sdatafile <- paste("../datuak/hch11/hch11_", phase, "_sdata.rds", sep = "")
d <- readRDS("../datuak/hch11/hch11_chains_d_update.rds")
# only human data (without computer-generated sequences)
dh <- d[d$generation != 0,]
pall.rat <- readRDS("../datuak/hch11/hch11_chains_pall.rat.rds") %>% ungroup()
pall.rat
tbl_df(a = character(0))
tibble(a = character(0))
pgram.freq <- tbl_df(data.frame(subjID = character(0),
ngram = character(0),
n = integer(0), stringsAsFactors = F))
pgram.freq
tibble(subjID = character(0),
ngram = character(0),
n = integer(0))
tibble(subjID = character(0),
ngram = character(0),
n = integer(0))
tibble(subjID = character(0), ngram = character(0), n = integer(0))
keys <- as.character(1:4)
keys
pgrams <- combis(1, 5, c(keys, "."))
pgrams
i <- 2
symbs <- c(keys, ".")
symbs
pgrams <- data.frame()
pgrams1 <- expand.grid(rep(list(symbs), i), stringsAsFactors = F)
pgrams1
pgrams1[, names(pgrams1)])
pgrams1[, names(pgrams1)]
pgrams %>% class()
pgrams2 <- apply(data.frame(pgrams1[, names(pgrams1)]), 1, paste, collapse = clps)
clps <- ""
pgrams2 <- apply(data.frame(pgrams1[, names(pgrams1)]), 1, paste, collapse = clps)
pgrams2
expand.grid(rep(list(symbs), i), stringsAsFactors = F)
rep(list(symbs), i)
symbs
symbs
symbs %>% tibble()
symbs %>%
tibble() %>%
rep(2)
?rep
symbs %>%
tibble() %>%
rep(each = 2)
symbs %>%
tibble() %>%
rep(2)
symbs %>%
tibble() %>%
slice(1:4)
symbs %>%
tibble() %>%
slice(c(1:4, 1:4))
symbs %>%
tibble() %>%
slice(c(1:5, 1:4))
seq(nchar(symbs))
seq(nchar(symbs)) %>% rep(2)
symbs %>%
tibble() %>%
slice(seq(nchar(symbs)) %>% rep(i))
rep(list(symbs), i)
expand.grid(rep(list(symbs), i), stringsAsFactors = F)
?crossing
crossing(symbs)
crossing(symbs, symbs)
expand.grid(rep(list(symbs), i), stringsAsFactors = F)
symbs
expand.grid(rep(list(symbs), i), stringsAsFactors = F)
apply(data.frame(pgrams1[, names(pgrams1)]), 1, paste, collapse = clps)
pgrams1 <- expand.grid(rep(list(symbs), i), stringsAsFactors = F)
pgrams2 <- apply(data.frame(pgrams1[, names(pgrams1)]), 1, paste, collapse = clps)
pgrams2
tibble(gramsize = i, ngram = pgrams2)
i
class(i)
i <- 2
class(i)
tibble(gramsize = as.integer(i), ngram = pgrams2)
pgrams1 <- expand.grid(rep(list(symbs), i), stringsAsFactors = F)
pgrams2 <- apply(data.frame(pgrams1[, names(pgrams1)]), 1, paste, collapse = clps)
pgrams <- tibble(gramsize = as.integer(i), ngram = pgrams2) %>%
bind_rows(pgrams)
pgrams
i <- 3
pgrams1 <- expand.grid(rep(list(symbs), i), stringsAsFactors = F)
pgrams2 <- apply(data.frame(pgrams1[, names(pgrams1)]), 1, paste, collapse = clps)
pgrams <- tibble(gramsize = as.integer(i), ngram = pgrams2) %>%
bind_rows(pgrams)
pgrams
pgrams <- tibble(gramsize = as.integer(i), ngram = pgrams2) %>%
bind_rows(pgrams) %>%
arrange(gramsize)
pgrams
combis <- function(min.n, max.n, symbs, clps = "") {
pgrams <- data.frame()
for (i in min.n:max.n) {
pgrams1 <- expand.grid(rep(list(symbs), i), stringsAsFactors = F)
pgrams2 <- apply(data.frame(pgrams1[, names(pgrams1)]), 1, paste, collapse = clps)
# pgrams3 <- data.frame(gramsize = i, ngram = pgrams2, stringsAsFactors = F)
pgrams <- tibble(gramsize = as.integer(i), ngram = pgrams2) %>%
bind_rows(pgrams) %>%
arrange(gramsize)
# pgrams <- rbind(pgrams, pgrams3)
}
return(pgrams)
}
pgrams <- combis(1, 5, c(keys, "."))
pgrams
combis <- function(min.n, max.n, symbs, clps = "") {
pgrams <- data.frame()
for (i in min.n:max.n) {
pgrams1 <- expand.grid(rep(list(symbs), i), stringsAsFactors = F)
pgrams2 <- apply(data.frame(pgrams1[, names(pgrams1)]), 1, paste, collapse = clps)
pgrams3 <- data.frame(gramsize = i, ngram = pgrams2, stringsAsFactors = F)
pgrams <- rbind(pgrams, pgrams3)
}
return(pgrams)
}
pgrams <- combis(1, 5, c(keys, "."))
pgrams %>% tbl_df()
tibble(subjID = character(0), ngram = character(0), n = integer(0))
pgram.freq <- tibble(subjID = character(0), ngram = character(0), n = integer(0))
pgrams
head(pgrams)
head(d$subjID)
View(d)
pgram.f <- readRDS("../datuak/hch11/hch11_pgram.f.rds")
View(pgram.f)
pgram.f %>% filter(gramsize %in% 2:4) %>% View
#' ---
#' title: HCH 1.1, summary 1
#' author: vdca
#' date: "Created: 2016.02.18. Modified: `r Sys.time()`"
#' css: css/vignette.css
#' output:
#'   html_document:
#'     toc: true
#'     toc_depth: 1
#'     theme: "flatly"
#'     highlight: "textmate"
#' ---
#+ setup, include=FALSE
opts_chunk$set(fig.width=9, fig.height=7, echo=FALSE, warning=FALSE, message=FALSE)
#--------------------------------------------------------
# Globals
#--------------------------------------------------------
rm(list=ls())     # remove previous objects from workspace
source("hch11_funs.R")
library(tidyverse)
library(ggplot2)
theme_set(theme_bw() + theme(strip.background = element_blank()))
library(ggrepel)
library(scales)
library(knitr)
library(reshape2)
library(stringdist)
library(lme4)
library(lmerTest)
library(tidyr)
library(dplyr)
library(broom)
library(stringr)
library(xtable)
library(tidytext)
# select experiment phase and chain for analysis
phase <- "chains"
chains <- as.character(1:4)
# figure properties
figscale <- 1
fw <- 5 # figure width
fh <- 5 # figure height
# directories
basedir <- "../esperimentuak/hch11/response"
figdir <- "../plotak/hch2/analysis/"
sdatafile <- paste("../datuak/hch11/hch11_", phase, "_sdata.rds", sep = "")
d <- readRDS("../datuak/hch11/hch11_chains_d_update.rds")
# only human data (without computer-generated sequences)
dh <- d[d$generation != 0,]
#' ---
#' title: HCH 1.1, analysis 3
#' author: vdca
#' date: "Created: 2016.08.02. Modified: `r Sys.time()`"
#' css: css/vignette.css
#' output:
#'   html_document:
#'     toc: true
#'     toc_depth: 1
#'     theme: "flatly"
#'     highlight: "textmate"
#' ---
#+ setup, include=FALSE
opts_chunk$set(fig.width=9, fig.height=7, echo=FALSE, warning=FALSE, message=FALSE)
#--------------------------------------------------------
#' # Globals
#--------------------------------------------------------
rm(list=ls())     # remove previous objects from workspace
# source("hch11_analysis1.R")
figdir <- "../plotak/hch2/"
source("rmetrics-functions1.R")
library(ggplot2)
# theme_set(theme_Publication())
theme_set(theme_bw())
library(scales)
library(psych)
library(knitr)
library(reshape2)
library(stringdist)
library(lme4)
library(lmerTest)
library(dplyr)
library(tidyr)
library(tidytext)
library(stringr)
library(readr)
# select experiment phase and chain for analysis
phase <- "chains"
chains <- as.character(1:4)
basedir <- "../esperimentuak/hch11/response"
figdir <- "../plotak/hch2/"
sdatafile <- paste("../datuak/hch11/hch11_", phase, "_sdata.rds", sep = "")
alldatafile <- gsub("sdata", "alldata2", sdatafile)
alldatafile <- gsub("rds", "rda", alldatafile)
interim <- 3
# split subjID info into chain + generation
splitid <- function(x) {
splitid <- strsplit(x, "\\.")
splitid <- do.call(rbind.data.frame, splitid)
names(splitid) <- c("chain", "generation")
splitid$chain <- as.integer(as.character(splitid$chain))
splitid$generation <- as.integer(as.character(splitid$generation))
return(splitid)
}
# load(alldatafile)
d <- readRDS("../datuak/hch11/hch11_chains_d_update.rds")
install.packages("keras")
library(keras)
install_keras(tensorflow = "gpu") # GPU version
install_keras(tensorflow = "gpu") # GPU version
install_keras(tensorflow = "gpu") # GPU version
rm(list=ls())     # remove previous objects from workspace
setwd("~/gdrive/aldakor/lana/MCK/gehigarriak/hch2")
source("hch2_funs.R")
library(tidyverse)
theme_set(theme_bw() + theme(strip.background = element_blank()))
library(broom)
library(lme4)
library(lmerTest)
library(stringdist)
d <- readRDS("hch2_sequences.rds") %>% tbl_df() %>% View
d <- readRDS("hch2_sequences.rds") %>% tbl_df() %>%
select(chain, generation, subjID, seqid = seqid1, seqIN = inseq, seqOUT = outseq)
d %>% write_csv("hch2_sequences.csv")
d2 <- read_csv("hch2_sequences.csv")
d2
d
read_csv("hch2_sequences.csv") %>%
mutate(subjID = as.character(subjID))
read_csv("hch2_sequences.csv") %>%
mutate(subjID = paste0(chain, ".", generation))
d
?read_csv
read_csv("hch2_sequences.csv", col_types = "iicicc")
